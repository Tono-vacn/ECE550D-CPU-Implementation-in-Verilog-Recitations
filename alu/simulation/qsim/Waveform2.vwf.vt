// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/13/2023 20:28:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          csa_16
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module csa_16_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] a;
reg [15:0] b;
reg cin;
// wires                                               
wire cout;
wire [15:0] sum;

// assign statements (if any)                          
csa_16 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.cin(cin),
	.cout(cout),
	.sum(sum)
);
initial 
begin 
#1000000 $finish;
end 
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b0;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b0;
	a[11] = #630000 1'b1;
	a[11] = #130000 1'b0;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b0;
	a[10] = #630000 1'b1;
	a[10] = #130000 1'b0;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b0;
	a[9] = #630000 1'b1;
	a[9] = #130000 1'b0;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
	a[8] = #630000 1'b1;
	a[8] = #130000 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
	a[7] = #630000 1'b1;
	a[7] = #130000 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
	a[6] = #290000 1'b1;
	a[6] = #140000 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
	a[5] = #290000 1'b1;
	a[5] = #140000 1'b0;
	a[5] = #200000 1'b1;
	a[5] = #130000 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #290000 1'b1;
	a[1] = #140000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// b[ 15 ]
initial
begin
	b[15] = 1'b0;
	b[15] = #740000 1'b1;
	b[15] = #90000 1'b0;
end 
// b[ 14 ]
initial
begin
	b[14] = 1'b0;
	b[14] = #740000 1'b1;
	b[14] = #90000 1'b0;
end 
// b[ 13 ]
initial
begin
	b[13] = 1'b0;
	b[13] = #740000 1'b1;
	b[13] = #90000 1'b0;
end 
// b[ 12 ]
initial
begin
	b[12] = 1'b0;
	b[12] = #740000 1'b1;
	b[12] = #90000 1'b0;
end 
// b[ 11 ]
initial
begin
	b[11] = 1'b0;
end 
// b[ 10 ]
initial
begin
	b[10] = 1'b0;
end 
// b[ 9 ]
initial
begin
	b[9] = 1'b0;
end 
// b[ 8 ]
initial
begin
	b[8] = 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
	b[6] = #350000 1'b1;
	b[6] = #80000 1'b0;
	b[6] = #310000 1'b1;
	b[6] = #90000 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
	b[5] = #740000 1'b1;
	b[5] = #90000 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
	b[3] = #350000 1'b1;
	b[3] = #80000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #350000 1'b1;
	b[2] = #80000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #350000 1'b1;
	b[1] = #80000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #740000 1'b1;
	b[0] = #90000 1'b0;
end 

// cin
initial
begin
	cin = 1'b0;
	cin = #380000 1'b1;
	cin = #100000 1'b0;
	cin = #220000 1'b1;
	cin = #90000 1'b0;
end 
endmodule

